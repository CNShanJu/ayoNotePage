/* 备份 */

const bgUrl = './img/fantasy.jpg';
const filterUrl = './img/texture.jpg';

//状态
let isPlay = false;

// console.log(document.documentElement.clientWidth);
var playground = document.getElementById('px-render');

// 创建一个 Pixi应用 需要的一些参数
var option = {
    width: playground.clientWidth,
    height: playground.clientHeight,
    transparent: true,
    backgroundColor: 0x1099bb,
    // resolution: window.devicePixelRatio || 1 // 像素比
};
// 创建一个 Pixi应用
// var app = new PIXI.Application(option);
const app = new PIXI.Application();
// 图片精灵
var preview;
// 置换图精灵
var displacementSprite;
// 滤镜
var displacementFilter;
// 舞台（一个容器），这里面包括了图片精灵、置换图精灵
var stage;

await app.init(option);

//加载图片资源
PIXI.Assets.addBundle('resource', {
    bg: bgUrl,
    filter: filterUrl,
});
// const assets = await Assets.loadBundle('animals');
await PIXI.Assets.loadBundle('resource');
// await PIXI.Assets.load('./images/1.png');
// await PIXI.Assets.load('./images/f.image');

/* 设置容器 */
function setScene() {
    // 把 Pixi 创建的 canvas 添加到页面上
    playground.appendChild(app.canvas);

    // 创建一个容器
    stage = new PIXI.Container();

    /* 背景图加载 设置 */
    const texture = PIXI.Sprite.from(bgUrl);
    const preview = new PIXI.Sprite(texture);
    preview.x = 0;
    preview.y = 0;
    // 设置 yourSprite 的位置为居中
    // preview.anchor.set(0.5); // 设置锚点为中心点
    // preview.x = app.view.width  / 2;
    // preview.y = app.view.height / 2;

    // preview.width = option.width;
    // preview.height = option.height;
    // const scale = Math.min(app.view.width / preview.width, app.view.height / preview.height);
    // preview.scale =scale
    // debugger

    /* 设置容器缩放 => 让背景图等比缩放 */
    const scale = Math.max(app.view.width / preview.width, app.view.height / preview.height);
    stage.scale = scale;

    // preview = PIXI.Sprite.from(url);
    // const sprite = new PIXI.Sprite(texture)
    // 创建置换图精灵，在创建置换滤镜时会用到这个精灵
    // 在加载完成后处理资源
    // const animalTexture = PIXI.Texture.from('./images/f.image');
    // displacementSprite = new PIXI.Sprite(animalTexture);

    /* 处理纹理 */
    displacementSprite = PIXI.Sprite.from(filterUrl);
    // displacementSprite.width = 10;
    // displacementSprite.height = 10;
    // 设置置换图精灵为平铺模式
    // displacementSprite.texture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT;
    //
    displacementSprite.texture.baseTexture.wrapMode = PIXI.WRAP_MODES.MIRRORED_REPEAT;
    // 创建一个置换滤镜
    displacementFilter = new PIXI.DisplacementFilter(displacementSprite);

    // 添加 图片精灵 到舞台
    stage.addChild(preview);
    // 添加 置换图精灵 到舞台
    stage.addChild(displacementSprite);

    // 把 stage 添加到根容器上
    app.stage.addChild(stage);
    /* 播放 */
    playRipple();
}

// 置换图精灵的移动速度
var velocity = 1;
// raf 是调用 requestAnimationFrame方法的返回值，停止动画效果时需要用到
// var raf;
/* 执行的动画函数 => 暴露出来方便移除 */
let tickerFunction;

/* 执行动画 */
function animate() {
    /* 方法一 */
    // raf = requestAnimationFrame(animate);
    // // 改变置换图精灵的位置
    // displacementSprite.x += velocity;
    // displacementSprite.y += velocity;
    /* 方法二 */
    // 动画循环
    tickerFunction = app.ticker.add(() => {
        // 改变置换图精灵的位置 => 加减随意，用来控制方向的
        /**/
        // displacementSprite.x += velocity;
        // displacementSprite.y -= velocity;
        /**/
        // displacementSprite.x -= velocity;
        // displacementSprite.y -= velocity;
        /**/
        displacementSprite.x += velocity;
        displacementSprite.y += velocity;
        /**/
        // displacementSprite.x -= velocity;
        // displacementSprite.y += velocity;
        // 可以在这里修改置换滤镜的一些属性，例如 `displacementFilter.scale.x` 和 `displacementFilter.scale.y`
    });
}

//开始播放
function playRipple() {
    if (!isPlay) {
        isPlay = true;
        // 设置舞台的滤镜
        stage.filters = [displacementFilter];
        // // 改变置换图精灵的位置
        // displacementSprite.x += velocity;
        // displacementSprite.y += velocity;
        // 开始动画
        animate();
    }
}
//结束
function stopRipple() {
    isPlay = false;
    displacementSprite.x = 0;
    displacementSprite.y = 0;
    // 取消滤镜
    stage.filters = [];
    // 停止动画
    // cancelAnimationFrame(raf);
    app.ticker.remove(tickerFunction);
}

//加载
setScene();

//绑定点击事件
var start = document.querySelector('.start-btn');
var stop = document.querySelector('.stop-btn');
start.onclick = playRipple;
stop.onclick = stopRipple;
